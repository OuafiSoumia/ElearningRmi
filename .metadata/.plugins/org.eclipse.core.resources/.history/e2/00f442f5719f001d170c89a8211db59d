package Chatrmi.Paint;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import Chatrmi.Paint.MyPaint.DrawCanvas;

import java.util.List;
import java.util.ArrayList;
import java.awt.*;       // Using AWT's Graphics and Color
import java.awt.event.*; // Using AWT's event classes and listener interfaces
import javax.swing.*;    // Using Swing's components and container


public class form extends JFrame {

	private JPanel contentPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					form frame = new form();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public form() {
		// Define constants for the various dimensions
	    final int CANVAS_WIDTH = 500;
	    final int CANVAS_HEIGHT = 300;
	    final Color LINE_COLOR = Color.RED;

	    // Lines drawn, consists of a List of PolyLine instances
	    List<PolyLine> lines = new ArrayList<PolyLine>();
	     PolyLine currentLine = null;  // the current line (for capturing)

	    // Constructor to set up the GUI components and event handlers
	  
	        DrawCanvas canvas = new DrawCanvas();
	        canvas.setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT));
	        canvas.addMouseListener(new MouseAdapter() {
	            @Override
	            public void mousePressed(MouseEvent evt) {
	                // Begin a new line
	                currentLine = new PolyLine();
	                lines.add(currentLine);
	                currentLine.addPoint(evt.getX(), evt.getY());
	            }
	        });
	        canvas.addMouseMotionListener(new MouseMotionAdapter() {
	            @Override
	            public void mouseDragged(MouseEvent evt) {
	                currentLine.addPoint(evt.getX(), evt.getY());
	                repaint();  // invoke paintComponent()
	            }
	        });

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		canvas.setBounds(0, 65, 448, 213);
		contentPane.add(canvas);
	        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	        setTitle("Paint");
	        pack();
	        setVisible(true);
	    }
	
	
	private class DrawCanvas extends JPanel {
        @Override
        protected void paintComponent(Graphics g) { // called back via repaint()
            super.paintComponent(g);
          //  g.setColor(LINE_RED);
            for (PolyLine line: lines) {
                line.draw(g);
            }
        }
    }
	
	
	
}
